{"/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/test.js":"/* istanbul instrument in package npmtest_gulp_angular_embed_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/lib.npmtest_gulp_angular_embed_templates.js":"/* istanbul instrument in package npmtest_gulp_angular_embed_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_angular_embed_templates = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_angular_embed_templates = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-angular-embed-templates && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_angular_embed_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_angular_embed_templates\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_angular_embed_templates.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_angular_embed_templates.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_angular_embed_templates.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_angular_embed_templates.__dirname +\n                    '/lib.npmtest_gulp_angular_embed_templates.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/node_modules/gulp-angular-embed-templates/index.js":"var through = require('through2');\nvar gutil = require('gulp-util');\nvar PluginError = gutil.PluginError;\n\nvar ProcessorEngine = require('./lib/ProcessorEngine');\nvar Angular1Processor = require('./lib/Angular1Processor');\nvar Angular2TypeScriptTemplateProcessor = require('./lib/Angular2TypeScriptProcessor');\nvar utils = require('./lib/utils');\n\nconst PLUGIN_NAME = 'gulp-angular-embed-template';\n\nmodule.exports = function (options) {\n    options = options || {};\n\n    var sourceType = options.sourceType;\n    delete options.sourceType;\n    switch (sourceType) {\n        case 'ts':\n            options.processors = [new Angular1Processor(), new Angular2TypeScriptTemplateProcessor()];\n            break;\n        case 'js':\n        default:\n            options.processors = [new Angular1Processor()];\n    }\n\n    var logger = options.logger = utils.createLogger();\n    if (options.debug !== true) {\n        logger.debug = function () {}\n    }\n    delete options.debug;\n    logger.warn = function(msg) {\n        gutil.log(\n            PLUGIN_NAME,\n            gutil.colors.yellow('[Warning]'),\n            gutil.colors.magenta(msg)\n        );\n    };\n\n    var skipFiles = options.skipFiles || function() {return false;};\n    delete options.skipFiles;\n    if (typeof skipFiles === 'function') {\n        /* OK */\n    } else if (skipFiles instanceof RegExp) {\n        var regexp = skipFiles;\n        skipFiles = function(file) {\n            return regexp.test(file.path);\n        }\n    } else {\n        logger.warn('\"skipFiles\" options should be either function or regexp, actual type is ' + typeof skipFiles);\n        skipFiles = function() {return false;}\n    }\n\n    var processorEngine = new ProcessorEngine();\n    processorEngine.init(options);\n\n    /**\n     * This function is 'through' callback, so it has predefined arguments\n     * @param {File} file file to analyse\n     * @param {String} enc encoding (unused)\n     * @param {Function} cb callback\n     */\n    function transform(file, enc, cb) {\n        // ignore empty files\n        if (file.isNull()) {\n            cb(null, file);\n            return;\n        }\n\n        if (file.isStream()) {\n            throw new PluginError(PLUGIN_NAME, 'Streaming not supported. particular file: ' + file.path);\n        }\n\n        logger.debug('\\n\\nfile.path: %s', file.path || 'fake');\n\n        if (skipFiles(file)) {\n            logger.info('skip file %s', file.path);\n            cb(null, file);\n            return;\n        }\n\n        var pipe = this;\n        processorEngine.process(file, cb, function onErr(msg) {\n            pipe.emit('error', new PluginError(PLUGIN_NAME, msg));\n        });\n    }\n\n    return through.obj(transform);\n};","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/node_modules/gulp-angular-embed-templates/lib/ProcessorEngine.js":"var pathModule = require('path');\nvar utils = require('./utils');\nvar objectAssign = require('object-assign');\n\nvar ProcessorEngine = utils.extend(Object, {\n    init: function (config) {\n        this.config = objectAssign({}, config);\n\n        this.logger = utils.createLogger(config.logger);\n\n        if (this.config.skipErrors === undefined) {\n            this.config.skipErrors = false;\n        }\n        if (!this.config.jsEncoding) {\n            this.config.jsEncoding = 'utf-8';\n        }\n\n        this.processors = this.config.processors;\n        delete this.config.processors;\n        for (var i = 0; i < this.processors.length; i++) {\n            this.processors[i].init(this.config);\n        }\n    },\n\n    /**\n     * @param {File} file node file object\n     * @param {Function} cb success callback\n     * @param {Function} onErr error callback\n     */\n    process: function (file, cb, onErr) {\n        var fileContent = file.contents.toString(this.config.jsEncoding);\n        var entrances = [];\n\n        var fileContext = {\n            content: fileContent,\n            path: this.config.basePath ? this.config.basePath : pathModule.dirname(file.path)\n        };\n\n        utils.recursiveCycle(\n            this.processors,\n            function onIteration(processor, next) {\n                processor.process(fileContext, function cb(paths) {\n                    Array.prototype.push.apply(entrances, paths);\n                    next();\n                }, onErr);\n            },\n            function onProcessorSuccess() {\n                if (entrances.length !== 0) {\n                    file.contents = this.joinParts(fileContent, entrances);\n                }\n                cb(null, file);\n            }.bind(this)\n        );\n    },\n\n    /**\n     * join parts [before] ['template':] [template] [after]\n     * @param {String} fileContent\n     * @param {Array} entrances\n     * @return Buffer\n     */\n    joinParts: function (fileContent, entrances) {\n        entrances.sort(function (e1, e2) {\n            return e1.start - e2.start;\n        });\n\n        var parts = [];\n        var index = 0;\n        for (var i = 0; i < entrances.length; i++) {\n            var entrance = entrances[i];\n\n            parts.push(Buffer(fileContent.substring(index, entrance.start)));\n            Array.prototype.push.apply(parts, entrance.replace);\n\n            index = entrance.start + entrance.length;\n        }\n        parts.push(Buffer(fileContent.substr(index)));\n        return Buffer.concat(parts);\n    }\n});\n\nmodule.exports = ProcessorEngine;","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/node_modules/gulp-angular-embed-templates/lib/utils.js":"var objectAssign = require('object-assign');\n\n/**\n * @param {Function} ParentClass class to extend from\n * @param {Object} prototype methods to be added in child class prototype\n * @returns {Function} new \"class\" extending from ParentClass\n */\nfunction extend(ParentClass, prototype) {\n    function ChildClass() {}\n\n    ChildClass.prototype = Object.create ? Object.create(ParentClass.prototype) : new ParentClass();\n    ChildClass.prototype.constructor = ChildClass;\n    ChildClass.prototype._super = ParentClass.prototype;\n\n    if (prototype) {\n        for (var key in prototype) if (prototype.hasOwnProperty(key)) {\n            ChildClass.prototype[key] = prototype[key];\n        }\n    }\n    return ChildClass;\n}\n\n/**\n * Helper function to walk recursively through arr\n *\n * @param arr\n * @param onIteration\n * @param onEnd\n */\nfunction recursiveCycle(arr, onIteration, onEnd) {\n    var i=0;\n    function next() {\n        if (i >= arr.length) {\n            onEnd();\n            return;\n        }\n        var item = arr[i];\n        i++;\n        onIteration(item, next, onEnd);\n    }\n    next();\n}\n\n/**\n * create a logger object based on passed logger. If passed logger has no some methods then add them\n *\n * @param {Object} [logger] object with methods .debug, .warn, .error. Can be\n * @return {Object}\n */\nfunction createLogger(logger) {\n    var result = logger ? objectAssign({}, logger) : {};\n    if (!result.debug) result.debug = console.log;\n    if (!result.info) result.info = console.info;\n    if (!result.warn) result.warn = console.warn;\n    if (!result.error) result.error = console.error;\n    return result;\n}\n\nmodule.exports = {\n    extend: extend,\n    recursiveCycle: recursiveCycle,\n    createLogger: createLogger\n};","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/node_modules/gulp-angular-embed-templates/lib/Angular1Processor.js":"var fs = require('fs');\nvar pathModule = require('path');\nvar Minimize = require('minimize');\nvar html = require('htmlparser2');\n\nvar extend = require('./utils').extend;\nvar RegexpProcessor = require('./RegexpProcessor');\n\nconst TEMPLATE_BEGIN = Buffer('template:\\'');\nconst TEMPLATE_END = Buffer('\\'');\n\nfunction escapeSingleQuotes(string) {\n    const ESCAPING = {\n        '\\'': '\\\\\\'',\n        '\\\\': '\\\\\\\\',\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\u2028': '\\\\u2028',\n        '\\u2029': '\\\\u2029'\n    };\n    return string.replace(/['\\\\\\n\\r\\u2028\\u2029]/g, function (character) {\n        return ESCAPING[character];\n    });\n}\n\nvar Angular1Processor = extend(RegexpProcessor, {\n    init : function(config) {\n        this._super.init(config);\n\n        if (!this.config.minimize) {\n            this.config.minimize = {};\n        }\n        if (typeof this.config.minimize.quotes === 'undefined') {\n            this.config.minimize.quotes = true;\n        }\n        this.minimizer = new Minimize(this.config.minimize);\n        if (!this.config.minimize.parser) {\n            this.minimizer.htmlparser = new html.Parser(\n                new html.DomHandler(this.minimizer.emits('read')), {lowerCaseAttributeNames:false}\n            );\n        }\n\n        if (!this.config.templateEncoding) {\n            this.config.templateEncoding = 'utf-8';\n        }\n    },\n\n    /**\n     * @returns {String} pattern to search\n     */\n    getPattern : function() {\n        return '[\\'\"]?templateUrl[\\'\"]?[\\\\s]*:[\\\\s]*[\\'\"`]([^\\'\"`]+)[\\'\"`]';\n    },\n\n    /**\n     * Find next \"templateUrl:\", and try to replace url with content if template available, less then maximum size.\n     * This is recursive function: it call itself until one of two condition happens:\n     * - error happened (error emitted in pipe and stop recursive calls)\n     * - no 'templateUrl' left (call 'fileCallback' and stop recursive calls)\n     *\n     * @param {Object} fileContext source file content\n     * @param {Object} match Regexp.exec result\n     * @param {Function} cb to call after match replaced\n     * @param {Function} onErr error handler\n     */\n    replaceMatch : function(fileContext, match, cb, onErr) {\n        var relativeTemplatePath = match[1];\n        var templatePath = pathModule.join(fileContext.path, relativeTemplatePath);\n        var warnNext = function(msg) {\n            this.logger.warn(msg);\n            cb();\n        }.bind(this);\n        var onError = this.config.skipErrors ? warnNext : onErr;\n\n        this.logger.debug('template path: %s', templatePath);\n\n        if (this.config.maxSize) {\n            var fileStat = fs.statSync(templatePath);\n            if (fileStat && fileStat.size > this.config.maxSize) {\n                warnNext('template file \"' + templatePath + '\" exceeds configured max size \"' + this.config.maxSize + '\" actual size is \"' + fileStat.size + '\"');\n                return;\n            }\n        }\n\n        var embedTemplate = this.embedTemplate.bind(this);\n        var minimizer = this.minimizer;\n        fs.readFile(templatePath, {encoding: this.config.templateEncoding}, function(err, templateContent) {\n            if (err) {\n                onError('Can\\'t read template file: \"' + templatePath + '\". Error details: ' + err);\n                return;\n            }\n\n            minimizer.parse(templateContent, function (err, minifiedContent) {\n                if (err) {\n                    onError('Error while minifying angular template \"' + templatePath + '\". Error from \"minimize\" plugin: ' + err);\n                    return;\n                }\n\n                var templateBuffer = Buffer(escapeSingleQuotes(minifiedContent));\n                cb(embedTemplate(match, templateBuffer));\n            });\n        });\n    },\n\n    embedTemplate : function(match, templateBuffer) {\n        return {\n            start : match.index,\n            length: match[0].length,\n            replace: [TEMPLATE_BEGIN, templateBuffer, TEMPLATE_END]\n        }\n    }\n});\n\nmodule.exports = Angular1Processor;","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/node_modules/gulp-angular-embed-templates/lib/RegexpProcessor.js":"var extend = require('./utils').extend;\nvar Processor = require('./Processor');\n\nvar RegexpProcessor = extend(Processor, {\n    init : function(config) {\n        this._super.init(config);\n\n        var skipTemplates = config.skipTemplates || function() {return false;};\n        delete config.skipTemplates;\n        if (typeof skipTemplates === 'function') {\n            /* OK */\n        } else if (skipTemplates instanceof RegExp) {\n            var regexp = skipTemplates;\n            skipTemplates = function(templateUrl, fileContext) {\n                return regexp.test(templateUrl);\n            }\n        } else {\n            logger.warn('\"skipTemplates\" options should be either function or regexp, actual type is ' + typeof skipTemplates);\n            skipTemplates = function() {return false;}\n        }\n        this.config.skipTemplates = skipTemplates;\n    },\n\n    /**\n     * @return {String} return regexp pattern\n     */\n    getPattern : function() {\n        throw 'not implemented';\n    },\n\n    process : function(fileContext, cb, onErr) {\n        /**\n         * @type {RegExp} we create a regexp each time with 'g' flag to hold current position\n         * and search second time from previous position + 1\n         */\n        var pattern = this.getPattern();\n        var regexp = new RegExp(pattern, 'g');\n        var entrances = [];\n\n        var that = this;\n        function next() {\n            var match = regexp.exec(fileContext.content);\n            if (match === null) {\n                cb(entrances);\n                return;\n            }\n            if (that.config.skipTemplates(match[1], fileContext)) {\n                that.logger.info('skip template \"%s\" in file \"%s\"', match[1], fileContext.path);\n                next();\n                return;\n            }\n            that.replaceMatch(fileContext, match, function(entrance) {\n                if (entrance) {\n                    entrances.push(entrance);\n                }\n                next();\n            }, onErr);\n        }\n        next();\n    },\n\n    replaceMatch : function(fileContext, match, cb, onErr) {\n        throw 'not implemented';\n    }\n});\n\nmodule.exports = RegexpProcessor;","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/node_modules/gulp-angular-embed-templates/lib/Processor.js":"var createLogger = require('./utils').createLogger;\nvar objectAssign = require('object-assign');\n\nfunction Processor() {}\n\n/**\n * @param config\n */\nProcessor.prototype.init = function(config) {\n    this.config = objectAssign({}, config);\n    this.logger = createLogger(this.config.logger);\n};\n\n/**\n *\n * @param {Object} fileContext config object with params:\n * {\n *   \"content\": {string} file content\n *   \"path\" : {string} file path in system\n * }\n *\n * @param {Function} cb function to call when process complete, should be called with Array of replacements:\n * [\n *   {\n *     \"start\": {number} replacement start\n *     \"length\": {number} replacement length\n *     \"replace\": [Buffer] replace by this buffers\n *   }\n * ]\n *\n * @param {Function} onErr error callback\n */\nProcessor.prototype.process = function(fileContext, cb, onErr) {\n    cb();\n};\n\nmodule.exports = Processor;","/home/travis/build/npmtest/node-npmtest-gulp-angular-embed-templates/node_modules/gulp-angular-embed-templates/lib/Angular2TypeScriptProcessor.js":"var extend = require('./utils').extend;\nvar Angular1Processor = require('./Angular1Processor');\n\nconst TEMPLATE_BEGIN = Buffer('template:string=\\'');\nconst TEMPLATE_END = Buffer('\\'');\n\nvar Angular2TypeScriptProcessor = extend(Angular1Processor, {\n    /**\n     * @override\n     */\n    getPattern : function() {\n        // for typescript: 'templateUrl: string = \"template.html\"'\n        return '[\\'\"]?templateUrl[\\'\"]?[\\\\s]*:[\\\\s]*string[\\\\s]*=[\\\\s]*[\\'\"`]([^\\'\"`]+)[\\'\"`]';\n    },\n\n    /**\n     * @override\n     */\n    embedTemplate : function(match, templateBuffer) {\n        return {\n            start : match.index,\n            length: match[0].length,\n            replace: [TEMPLATE_BEGIN, templateBuffer, TEMPLATE_END]\n        }\n    }\n});\n\nmodule.exports = Angular2TypeScriptProcessor;"}